{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices: []\n  },\n  reducers: {\n    fetch: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    update: state => {},\n    add: (state, action) => {}\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/var/www/html/demo/pos_codetest/pos_frontend_app/src/reducer/invoices/invoicesSlice.js"],"names":["createSlice","invoicesSlice","name","initialState","invoices","reducers","fetch","state","value","update","add","action","increment","decrement","incrementByAmount","counterSlice","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACvCE,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAC;AADG,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAEC,KAAK,IAAI;AACd;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRC,IAAAA,MAAM,EAAEF,KAAK,IAAI,CAEhB,CAVO;AAWRG,IAAAA,GAAG,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB,CAEvB;AAbO;AAL6B,CAAD,CAAjC;AAsBP,OAAO,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CC,YAAY,CAACC,OAAjE;AAEP,eAAeD,YAAY,CAACE,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices:[]\n  },\n  reducers: {\n    fetch: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    update: state => {\n\n    },\n    add: (state, action) => {\n\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport default counterSlice.reducer"]},"metadata":{},"sourceType":"module"}