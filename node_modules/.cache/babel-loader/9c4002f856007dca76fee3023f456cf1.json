{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices: []\n  },\n  reducers: {\n    fetchData: state => invoices => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"invoices\", invoices);\n      state.invoices = invoices;\n    },\n    update: state => {},\n    add: (state, action) => {\n      console.log(\"Add to invoice\");\n    }\n  }\n});\nexport const fetchInvoices = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n}); // the outside \"thunk creator\" function\n\nexport const fetch = userId => {\n  // the inside \"thunk function\"\n  console.log(\"Fetch invoices\");\n  return async (dispatch, getState) => {\n    try {\n      // make an async call in the thunk\n      //const user = await userAPI.fetchById(userId)\n      // dispatch an action when we get the response back\n      //dispatch(userLoaded(user))\n      let invoices = []; ///dispatch(fetchData(invoices));\n\n      console.log(\"dispatch\");\n      return invoices;\n    } catch (err) {// If something went wrong, handle it here\n    }\n  };\n};\nexport const {\n  fetchData,\n  update,\n  add\n} = invoicesSlice.actions;\nexport default invoicesSlice.reducer;","map":{"version":3,"sources":["/var/www/html/demo/pos_codetest/pos_frontend_app/src/reducer/invoices/invoicesSlice.js"],"names":["createSlice","invoicesSlice","name","initialState","invoices","reducers","fetchData","state","console","log","update","add","action","fetchInvoices","createAsyncThunk","response","client","get","data","fetch","userId","dispatch","getState","err","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACvCE,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAC;AADG,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAEC,KAAK,IAAIH,QAAQ,IAAI;AAC9B;AACA;AACA;AACA;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBL,QAAvB;AACAG,MAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AAED,KATO;AAURM,IAAAA,MAAM,EAAEH,KAAK,IAAI,CAEhB,CAZO;AAaRI,IAAAA,GAAG,EAAE,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AAEpBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AAhBO;AAL6B,CAAD,CAAjC;AAyBP,OAAO,MAAMI,aAAa,GAAGC,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AAC1E,QAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,GAAP,CAAW,gBAAX,CAAvB;AACA,SAAOF,QAAQ,CAACG,IAAhB;AACH,CAH4C,CAAtC,C,CAKP;;AACA,OAAO,MAAMC,KAAK,GAAGC,MAAM,IAAI;AAC3B;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAO,OAAOY,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAI;AACF;AACA;AACA;AACA;AACA,UAAIlB,QAAQ,GAAG,EAAf,CALE,CAMF;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aAAOL,QAAP;AAED,KAVD,CAUE,OAAOmB,GAAP,EAAY,CACZ;AACD;AACF,GAdD;AAeD,CAlBI;AAmBP,OAAO,MAAM;AAAEjB,EAAAA,SAAF;AAAaI,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,IAA6BV,aAAa,CAACuB,OAAjD;AAEP,eAAevB,aAAa,CAACwB,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices:[]\n  },\n  reducers: {\n    fetchData: state => invoices => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"invoices\",invoices);\n      state.invoices = invoices;\n\n    },\n    update: state => {\n\n    },\n    add: (state, action) => {\n\n        console.log(\"Add to invoice\");\n    }\n  }\n})\n\nexport const fetchInvoices = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await client.get('/fakeApi/posts')\n    return response.data\n})\n\n// the outside \"thunk creator\" function\nexport const fetch = userId => {\n    // the inside \"thunk function\"\n    console.log(\"Fetch invoices\");\n    return async (dispatch, getState) => {\n      try {\n        // make an async call in the thunk\n        //const user = await userAPI.fetchById(userId)\n        // dispatch an action when we get the response back\n        //dispatch(userLoaded(user))\n        let invoices = [];\n        ///dispatch(fetchData(invoices));\n        console.log(\"dispatch\");\n        return invoices;\n\n      } catch (err) {\n        // If something went wrong, handle it here\n      }\n    }\n  }\nexport const { fetchData, update, add } = invoicesSlice.actions\n\nexport default invoicesSlice.reducer"]},"metadata":{},"sourceType":"module"}