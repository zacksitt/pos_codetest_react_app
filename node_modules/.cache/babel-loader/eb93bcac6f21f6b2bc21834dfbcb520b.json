{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices: []\n  },\n  reducers: {\n    fetch: state => {// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    update: state => {},\n    add: (state, action) => {\n      console.log(\"Add to invoice\");\n    }\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchInvoices.pending, (state, action) => {\n      console.log(\"pending\");\n    }).addCase(fetchInvoices.fulfilled, (state, action) => {\n      // state.status = 'succeeded'\n      // Add any fetched posts to the array\n      console.log(\"fullfilled\");\n      state.invoices = state.invoices.concat(action.payload);\n    }).addCase(addNewInvoice.fulfilled, (state, action) => {\n      state.invoices.push(action.payload);\n    });\n  }\n\n});\nexport const selectAllInvoices = state => state.invoices.invoices;\nexport const fetchInvoices = createAsyncThunk('invoices/fetInvoices', async () => {\n  //const response = await client.get('/fakeApi/posts')\n  //return response.data\n  console.log(\"fetchInvoices\");\n  return [{\n    id: 1,\n    customer_name: \"Aung Aung\",\n    saleperson_name: \"Su Zar\",\n    date: \"22/07/2022\"\n  }];\n});\nexport const addNewInvoice = createAsyncThunk('invoices/addNewInvoice', async initialInvoice => {\n  console.log(\"new invoice\", initialInvoice); //const response = await client.post('/fakeApi/posts', initialPost)\n  //return response.data\n\n  initialInvoice;\n});\nexport const {\n  fetch,\n  update,\n  add\n} = invoicesSlice.actions;\nexport default invoicesSlice.reducer;","map":{"version":3,"sources":["/var/www/html/demo/pos_codetest/pos_frontend_app/src/reducer/invoices/invoicesSlice.js"],"names":["createSlice","createAsyncThunk","invoicesSlice","name","initialState","invoices","reducers","fetch","state","update","add","action","console","log","extraReducers","builder","addCase","fetchInvoices","pending","fulfilled","concat","payload","addNewInvoice","push","selectAllInvoices","id","customer_name","saleperson_name","date","initialInvoice","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AAEA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAC;AADG,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAEC,KAAK,IAAI,CACd;AACA;AACA;AACA;AAED,KAPO;AAQRC,IAAAA,MAAM,EAAED,KAAK,IAAI,CAEhB,CAVO;AAWRE,IAAAA,GAAG,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AAdO,GAL6B;;AAqBvCC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACWC,aAAa,CAACC,OADzB,EACkC,CAACV,KAAD,EAAQG,MAAR,KAAmB;AACjDC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAHH,EAIGG,OAJH,CAIWC,aAAa,CAACE,SAJzB,EAIoC,CAACX,KAAD,EAAQG,MAAR,KAAmB;AACpD;AACC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAL,MAAAA,KAAK,CAACH,QAAN,GAAiBG,KAAK,CAACH,QAAN,CAAee,MAAf,CAAsBT,MAAM,CAACU,OAA7B,CAAjB;AACD,KATH,EAUGL,OAVH,CAUWM,aAAa,CAACH,SAVzB,EAUoC,CAACX,KAAD,EAAQG,MAAR,KAAmB;AACnDH,MAAAA,KAAK,CAACH,QAAN,CAAekB,IAAf,CAAoBZ,MAAM,CAACU,OAA3B;AACD,KAZH;AAaD;;AAnCsC,CAAD,CAAjC;AAsCP,OAAO,MAAMG,iBAAiB,GAAIhB,KAAD,IAAWA,KAAK,CAACH,QAAN,CAAeA,QAApD;AACP,OAAO,MAAMY,aAAa,GAAGhB,gBAAgB,CAAC,sBAAD,EAAyB,YAAY;AAE9E;AACA;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAO,CAAC;AAACY,IAAAA,EAAE,EAAC,CAAJ;AAAMC,IAAAA,aAAa,EAAC,WAApB;AAAgCC,IAAAA,eAAe,EAAC,QAAhD;AAAyDC,IAAAA,IAAI,EAAC;AAA9D,GAAD,CAAP;AACH,CAN4C,CAAtC;AAQP,OAAO,MAAMN,aAAa,GAAGrB,gBAAgB,CACzC,wBADyC,EAEzC,MAAO4B,cAAP,IAA0B;AACtBjB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BgB,cAA1B,EADsB,CAExB;AACA;;AACEA,EAAAA,cAAc;AACjB,CAPwC,CAAtC;AAUP,OAAO,MAAM;AAAEtB,EAAAA,KAAF;AAASE,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,IAAyBR,aAAa,CAAC4B,OAA7C;AAEP,eAAe5B,aAAa,CAAC6B,OAA7B","sourcesContent":["import { createSlice,createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const invoicesSlice = createSlice({\n  name: 'invoices',\n  initialState: {\n    invoices:[]\n  },\n  reducers: {\n    fetch: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n    },\n    update: state => {\n\n    },\n    add: (state, action) => {\n\n        console.log(\"Add to invoice\");\n    }\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchInvoices.pending, (state, action) => {\n        console.log(\"pending\");\n      })\n      .addCase(fetchInvoices.fulfilled, (state, action) => {\n       // state.status = 'succeeded'\n        // Add any fetched posts to the array\n        console.log(\"fullfilled\");\n        state.invoices = state.invoices.concat(action.payload)\n      })\n      .addCase(addNewInvoice.fulfilled, (state, action) => {\n        state.invoices.push(action.payload)\n      })\n  },\n})\n\nexport const selectAllInvoices = (state) => state.invoices.invoices\nexport const fetchInvoices = createAsyncThunk('invoices/fetInvoices', async () => {\n\n    //const response = await client.get('/fakeApi/posts')\n    //return response.data\n    console.log(\"fetchInvoices\");\n    return [{id:1,customer_name:\"Aung Aung\",saleperson_name:\"Su Zar\",date:\"22/07/2022\"}];\n})\n\nexport const addNewInvoice = createAsyncThunk(\n    'invoices/addNewInvoice',\n    async (initialInvoice) => {\n        console.log(\"new invoice\",initialInvoice);\n      //const response = await client.post('/fakeApi/posts', initialPost)\n      //return response.data\n        initialInvoice\n    }\n  )\n\nexport const { fetch, update, add } = invoicesSlice.actions\n\nexport default invoicesSlice.reducer"]},"metadata":{},"sourceType":"module"}